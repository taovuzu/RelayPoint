version: "3.9"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.1
    container_name: relaypoint-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:7.5.1
    container_name: relaypoint-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    healthcheck:
      test: ["CMD", "bash", "-c", "unset KAFKA_OPTS && kafka-topics --bootstrap-server localhost:9092 --list"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: relaypoint-server
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      NODE_ENV: production
      PORT: 8080
      # external services
      MONGODB_URI: ${MONGODB_URI}
      DB_NAME: ${DB_NAME}
      REDIS_URL: ${REDIS_URL}
      # app
      BACKEND_URL: ${BACKEND_URL:-http://localhost:8080}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:5173}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:5173}
      ACCESS_TOKEN_SECRET: ${ACCESS_TOKEN_SECRET}
      REFRESH_TOKEN_SECRET: ${REFRESH_TOKEN_SECRET}
      REGISTRATION_TOKEN_SECRET: ${REGISTRATION_TOKEN_SECRET}
      USER_TEMPORARY_TOKEN_EXPIRY: ${USER_TEMPORARY_TOKEN_EXPIRY:-900000}
      SENSITIVE_RATE_LIMIT_WINDOW_MS: ${SENSITIVE_RATE_LIMIT_WINDOW_MS:-600000}
      SENSITIVE_RATE_LIMIT_MAX_REQUESTS: ${SENSITIVE_RATE_LIMIT_MAX_REQUESTS:-10}
      # kafka
      KAFKA_CLIENT_ID: relay-point
      KAFKA_BROKERS: kafka:9092
      KAFKA_TOPIC_WORKFLOWS: workflow-execution
      KAFKA_TOPIC_NOTIFICATIONS: workflow-notifications
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD-SHELL", "node -e \"require('http').get('http://localhost:8080/api/v1/health/',r=>process.exit(r.statusCode===200?0:1)).on('error',()=>process.exit(1))\" "]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -fsS http://localhost:8080/api/v1/health/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 20s

  worker:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: relaypoint-worker
    command: ["node", "src/worker.js"]
    depends_on:
      server:
        condition: service_started
    environment:
      NODE_ENV: production
      # external services
      MONGODB_URI: ${MONGODB_URI}
      DB_NAME: ${DB_NAME}
      REDIS_URL: ${REDIS_URL}
      # app
      BACKEND_URL: ${BACKEND_URL:-http://localhost:8080}
      # kafka
      KAFKA_CLIENT_ID: relay-point-worker
      KAFKA_BROKERS: kafka:9092
      KAFKA_GROUP_ID: relay-point-workers
      KAFKA_TOPIC_WORKFLOWS: workflow-execution
      KAFKA_TOPIC_NOTIFICATIONS: workflow-notifications
    healthcheck:
      test: ["CMD-SHELL", "node -e \"process.exit(0)\" "]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 15s
    restart: unless-stopped

  consumer:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: relaypoint-consumer
    command: ["node", "src/consumer.js"]
    depends_on:
      kafka:
        condition: service_healthy
      server:
        condition: service_started
    environment:
      NODE_ENV: production
      # external services
      MONGODB_URI: ${MONGODB_URI}
      DB_NAME: ${DB_NAME}
      REDIS_URL: ${REDIS_URL}
      # app
      BACKEND_URL: ${BACKEND_URL:-http://localhost:8080}
      # kafka
      KAFKA_CLIENT_ID: relay-point-consumer
      KAFKA_BROKERS: kafka:9092
      KAFKA_GROUP_ID: relay-executor-workers
      KAFKA_TOPIC_WORKFLOWS: workflow-execution
      KAFKA_TOPIC_NOTIFICATIONS: workflow-notifications
    healthcheck:
      test: ["CMD-SHELL", "node -e \"process.exit(0)\" "]
      interval: 15s
      timeout: 5s
      retries: 20
      start_period: 15s
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "process.exit(0)"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s